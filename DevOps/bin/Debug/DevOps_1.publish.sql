/*
Deployment script for Devops

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "Devops"
:setvar DefaultFilePrefix "Devops"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL14.MSSQLSERVER\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL14.MSSQLSERVER\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [master];


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END

GO
PRINT N'Creating $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)]
    ON 
    PRIMARY(NAME = [$(DatabaseName)], FILENAME = N'$(DefaultDataPath)$(DefaultFilePrefix)_Primary.mdf')
    LOG ON (NAME = [$(DatabaseName)_log], FILENAME = N'$(DefaultLogPath)$(DefaultFilePrefix)_Primary.ldf') COLLATE SQL_Latin1_General_CP1_CI_AS
GO
USE [$(DatabaseName)];


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                RECOVERY FULL,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY NONE,
                DATE_CORRELATION_OPTIMIZATION OFF,
                DISABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY OFF,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET FILESTREAM(NON_TRANSACTED_ACCESS = OFF),
                CONTAINMENT = NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CREATE_STATISTICS ON(INCREMENTAL = OFF),
                MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = OFF,
                DELAYED_DURABILITY = DISABLED 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (QUERY_CAPTURE_MODE = ALL, DATA_FLUSH_INTERVAL_SECONDS = 900, INTERVAL_LENGTH_MINUTES = 60, MAX_PLANS_PER_QUERY = 200, CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 367), MAX_STORAGE_SIZE_MB = 100) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE = OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE SCOPED CONFIGURATION SET MAXDOP = 0;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET MAXDOP = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET LEGACY_CARDINALITY_ESTIMATION = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET LEGACY_CARDINALITY_ESTIMATION = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET PARAMETER_SNIFFING = ON;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET PARAMETER_SNIFFING = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET QUERY_OPTIMIZER_HOTFIXES = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET QUERY_OPTIMIZER_HOTFIXES = PRIMARY;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET TEMPORAL_HISTORY_RETENTION ON 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
PRINT N'Creating [dbo].[Address]...';


GO
CREATE TABLE [dbo].[Address] (
    [AddressId]  BIGINT       IDENTITY (1, 1) NOT NULL,
    [Address1]   VARCHAR (70) NOT NULL,
    [Address2]   VARCHAR (70) NOT NULL,
    [City]       VARCHAR (35) NOT NULL,
    [Province]   CHAR (70)    NOT NULL,
    [PostalCode] VARCHAR (70) NOT NULL,
    [CountryId]  BIGINT       NOT NULL,
    [CreateDate] DATETIME     NOT NULL,
    [CreatedBy]  VARCHAR (60) NOT NULL,
    [UpdateDate] DATETIME     NULL,
    [UpdatedBy]  VARCHAR (60) NULL,
    CONSTRAINT [PK_Address_AddressId] PRIMARY KEY CLUSTERED ([AddressId] ASC)
);


GO
PRINT N'Creating [dbo].[CareTeamMember]...';


GO
CREATE TABLE [dbo].[CareTeamMember] (
    [CareTeamMemberId]            BIGINT        IDENTITY (1, 1) NOT NULL,
    [LastName]                    VARCHAR (35)  NOT NULL,
    [FirstName]                   VARCHAR (35)  NOT NULL,
    [MiddleName]                  VARCHAR (35)  NULL,
    [AddressId]                   BIGINT        NULL,
    [GenderId]                    BIGINT        NULL,
    [ProfessionalCategoryId]      BIGINT        NULL,
    [PhoneNumber]                 VARCHAR (35)  NULL,
    [CellNumber]                  VARCHAR (35)  NULL,
    [EmailAddress]                VARCHAR (35)  NULL,
    [DateofBirth]                 DATETIME      NULL,
    [PlaceofBirth]                VARCHAR (75)  NULL,
    [Company]                     VARCHAR (35)  NULL,
    [Demographic]                 VARCHAR (35)  NULL,
    [EmergencyContactName]        VARCHAR (35)  NULL,
    [EmergencyContactPhoneNumber] VARCHAR (35)  NULL,
    [HireDate]                    DATETIME      NULL,
    [TerminationDate]             DATETIME      NULL,
    [Specialization]              VARCHAR (50)  NULL,
    [PhotoFilePath]               VARCHAR (100) NULL,
    [CreateDate]                  DATETIME      NOT NULL,
    [CreatedBy]                   VARCHAR (60)  NOT NULL,
    [UpdateDate]                  DATETIME      NULL,
    [UpdatedBy]                   VARCHAR (60)  NULL,
    CONSTRAINT [PK_CareTeamMember_CareTeamMember] PRIMARY KEY CLUSTERED ([CareTeamMemberId] ASC)
);


GO
PRINT N'Creating [dbo].[Country]...';


GO
CREATE TABLE [dbo].[Country] (
    [CountryId]          BIGINT        IDENTITY (1, 1) NOT NULL,
    [Name]               VARCHAR (100) NOT NULL,
    [TwoLetterIsoCode]   VARCHAR (50)  NOT NULL,
    [ThreeLetterIsoCode] VARCHAR (50)  NOT NULL,
    [NumericIsoCode]     VARCHAR (50)  NOT NULL,
    [CreateDate]         DATETIME      NOT NULL,
    [CreatedBy]          VARCHAR (60)  NOT NULL,
    [UpdateDate]         DATETIME      NULL,
    [UpdatedBy]          VARCHAR (60)  NULL,
    CONSTRAINT [PK_Country_Id] PRIMARY KEY CLUSTERED ([CountryId] ASC)
);


GO
PRINT N'Creating [dbo].[Demographic]...';


GO
CREATE TABLE [dbo].[Demographic] (
    [DemographicId] BIGINT       IDENTITY (1, 1) NOT NULL,
    [Name]          VARCHAR (35) NOT NULL,
    [CreateDate]    DATETIME     NOT NULL,
    [CreatedBy]     VARCHAR (60) NOT NULL,
    [UpdateDate]    DATETIME     NULL,
    [UpdatedBy]     VARCHAR (60) NULL,
    CONSTRAINT [PK_DEmographic_DEmographic] PRIMARY KEY CLUSTERED ([DemographicId] ASC)
);


GO
PRINT N'Creating [dbo].[Desease]...';


GO
CREATE TABLE [dbo].[Desease] (
    [DeseaseId]   BIGINT        IDENTITY (1, 1) NOT NULL,
    [Name]        VARCHAR (35)  NOT NULL,
    [Description] VARCHAR (100) NULL,
    [CreateDate]  DATETIME      NOT NULL,
    [CreatedBy]   VARCHAR (60)  NOT NULL,
    [UpdateDate]  DATETIME      NULL,
    [UpdatedBy]   VARCHAR (60)  NULL,
    CONSTRAINT [PK_Desease_Desease] PRIMARY KEY CLUSTERED ([DeseaseId] ASC)
);


GO
PRINT N'Creating [dbo].[Gender]...';


GO
CREATE TABLE [dbo].[Gender] (
    [GenderId]   BIGINT       IDENTITY (1, 1) NOT NULL,
    [Name]       VARCHAR (35) NOT NULL,
    [CreateDate] DATETIME     NOT NULL,
    [CreatedBy]  VARCHAR (60) NOT NULL,
    [UpdateDate] DATETIME     NULL,
    [UpdatedBy]  VARCHAR (60) NULL,
    CONSTRAINT [PK_Gender_Gender] PRIMARY KEY CLUSTERED ([GenderId] ASC)
);


GO
PRINT N'Creating [dbo].[Hospital]...';


GO
CREATE TABLE [dbo].[Hospital] (
    [HospitalId]          BIGINT        IDENTITY (1, 1) NOT NULL,
    [CountryId]           BIGINT        NOT NULL,
    [HospitalName]        VARCHAR (100) NOT NULL,
    [URL]                 VARCHAR (50)  NULL,
    [SslEnabled]          VARCHAR (70)  NULL,
    [SecureUrl]           VARCHAR (70)  NULL,
    [Host]                VARCHAR (70)  NULL,
    [DefaultLanguageId]   BIGINT        NOT NULL,
    [DisplayOrder]        BIGINT        NOT NULL,
    [HospitalAddress]     VARCHAR (100) NULL,
    [HospitalPhoneNumber] VARCHAR (70)  NULL,
    [CreateDate]          DATETIME      NOT NULL,
    [CreatedBy]           VARCHAR (60)  NOT NULL,
    [UpdateDate]          DATETIME      NULL,
    [UpdatedBy]           VARCHAR (60)  NULL,
    CONSTRAINT [PK_Hospital_Id] PRIMARY KEY CLUSTERED ([HospitalId] ASC)
);


GO
PRINT N'Creating [dbo].[MenuItem]...';


GO
CREATE TABLE [dbo].[MenuItem] (
    [Id]               BIGINT       IDENTITY (1, 1) NOT NULL,
    [Title]            VARCHAR (70) NOT NULL,
    [Url]              VARCHAR (70) NOT NULL,
    [OpenInNewWindow ] BIT          NOT NULL,
    CONSTRAINT [PK_MenuItem_Id] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[Patient]...';


GO
CREATE TABLE [dbo].[Patient] (
    [PatientId]                BIGINT       IDENTITY (1, 1) NOT NULL,
    [LastName]                 VARCHAR (35) NOT NULL,
    [FirstName]                VARCHAR (35) NOT NULL,
    [MiddleName]               VARCHAR (35) NULL,
    [PatientStatus]            BIT          NOT NULL,
    [GenderId]                 BIGINT       NULL,
    [HomePhone]                VARCHAR (35) NULL,
    [CellPhone]                VARCHAR (35) NULL,
    [WorkPhone]                VARCHAR (35) NULL,
    [EmailAddress]             VARCHAR (35) NULL,
    [DateofBirth]              DATETIME     NULL,
    [Company]                  VARCHAR (35) NULL,
    [EmergencyContactName]     VARCHAR (35) NULL,
    [EmergencyContactPhone]    VARCHAR (35) NULL,
    [GorvernmentId]            VARCHAR (70) NULL,
    [Address1]                 VARCHAR (70) NULL,
    [Address2]                 VARCHAR (70) NULL,
    [City]                     VARCHAR (70) NULL,
    [Province]                 VARCHAR (70) NULL,
    [PostalCode]               VARCHAR (70) NULL,
    [CountryId]                BIGINT       NOT NULL,
    [PerferredMethodofContact] VARCHAR (70) NULL,
    [MaritalStatus]            VARCHAR (70) NULL,
    [DemographicId]            BIGINT       NOT NULL,
    [CreateDate]               DATETIME     NOT NULL,
    [CreatedBy]                VARCHAR (60) NOT NULL,
    [UpdateDate]               DATETIME     NULL,
    [UpdatedBy]                VARCHAR (60) NULL,
    CONSTRAINT [PK_Patient_Patient] PRIMARY KEY CLUSTERED ([PatientId] ASC)
);


GO
PRINT N'Creating [dbo].[Problem]...';


GO
CREATE TABLE [dbo].[Problem] (
    [ProblemId]   BIGINT        IDENTITY (1, 1) NOT NULL,
    [Name]        VARCHAR (35)  NOT NULL,
    [Description] VARCHAR (100) NULL,
    [CreateDate]  DATETIME      NOT NULL,
    [CreatedBy]   VARCHAR (60)  NOT NULL,
    [UpdateDate]  DATETIME      NULL,
    [UpdatedBy]   VARCHAR (60)  NULL,
    CONSTRAINT [PK_Problems_Problems] PRIMARY KEY CLUSTERED ([ProblemId] ASC)
);


GO
PRINT N'Creating [dbo].[ProfessionalCategory]...';


GO
CREATE TABLE [dbo].[ProfessionalCategory] (
    [ProfessionalCategoryId] BIGINT       IDENTITY (1, 1) NOT NULL,
    [Name]                   VARCHAR (35) NOT NULL,
    [CreateDate]             DATETIME     NOT NULL,
    [CreatedBy]              VARCHAR (60) NOT NULL,
    [UpdateDate]             DATETIME     NULL,
    [UpdatedBy]              VARCHAR (60) NULL,
    CONSTRAINT [PK_PC_PC] PRIMARY KEY CLUSTERED ([ProfessionalCategoryId] ASC)
);


GO
PRINT N'Creating [dbo].[Substance]...';


GO
CREATE TABLE [dbo].[Substance] (
    [SubstanceId] BIGINT        IDENTITY (1, 1) NOT NULL,
    [Name]        VARCHAR (35)  NOT NULL,
    [Description] VARCHAR (100) NULL,
    [CreateDate]  DATETIME      NOT NULL,
    [CreatedBy]   VARCHAR (60)  NOT NULL,
    [UpdateDate]  DATETIME      NULL,
    [UpdatedBy]   VARCHAR (60)  NULL,
    CONSTRAINT [PK_Substance_Substance] PRIMARY KEY CLUSTERED ([SubstanceId] ASC)
);


GO
PRINT N'Creating [dbo].[Symptoms]...';


GO
CREATE TABLE [dbo].[Symptoms] (
    [SymptomId]   BIGINT        IDENTITY (1, 1) NOT NULL,
    [ProblemId]   BIGINT        NOT NULL,
    [Name]        VARCHAR (35)  NOT NULL,
    [Description] VARCHAR (100) NULL,
    [CreateDate]  DATETIME      NOT NULL,
    [CreatedBy]   VARCHAR (60)  NOT NULL,
    [UpdateDate]  DATETIME      NULL,
    [UpdatedBy]   VARCHAR (60)  NULL,
    CONSTRAINT [PK_Symptoms_Symptoms] PRIMARY KEY CLUSTERED ([SymptomId] ASC)
);


GO
PRINT N'Creating [dbo].[DF_Address_CreateDate]...';


GO
ALTER TABLE [dbo].[Address]
    ADD CONSTRAINT [DF_Address_CreateDate] DEFAULT (getdate()) FOR [CreateDate];


GO
PRINT N'Creating [dbo].[DF_Address_CreatedBy]...';


GO
ALTER TABLE [dbo].[Address]
    ADD CONSTRAINT [DF_Address_CreatedBy] DEFAULT (suser_sname()) FOR [CreatedBy];


GO
PRINT N'Creating [dbo].[DF_CareTeamMember_CreateDate]...';


GO
ALTER TABLE [dbo].[CareTeamMember]
    ADD CONSTRAINT [DF_CareTeamMember_CreateDate] DEFAULT (getdate()) FOR [CreateDate];


GO
PRINT N'Creating [dbo].[DF_CareTeamMemberId_CreatedBy]...';


GO
ALTER TABLE [dbo].[CareTeamMember]
    ADD CONSTRAINT [DF_CareTeamMemberId_CreatedBy] DEFAULT (suser_sname()) FOR [CreatedBy];


GO
PRINT N'Creating [dbo].[DF_Country_CreateDate]...';


GO
ALTER TABLE [dbo].[Country]
    ADD CONSTRAINT [DF_Country_CreateDate] DEFAULT (getdate()) FOR [CreateDate];


GO
PRINT N'Creating [dbo].[DF_Country_CreatedBy]...';


GO
ALTER TABLE [dbo].[Country]
    ADD CONSTRAINT [DF_Country_CreatedBy] DEFAULT (suser_sname()) FOR [CreatedBy];


GO
PRINT N'Creating [dbo].[DF_Demographic_CreateDate]...';


GO
ALTER TABLE [dbo].[Demographic]
    ADD CONSTRAINT [DF_Demographic_CreateDate] DEFAULT (getdate()) FOR [CreateDate];


GO
PRINT N'Creating [dbo].[DF_Demographic_CreatedBy]...';


GO
ALTER TABLE [dbo].[Demographic]
    ADD CONSTRAINT [DF_Demographic_CreatedBy] DEFAULT (suser_sname()) FOR [CreatedBy];


GO
PRINT N'Creating [dbo].[DF_Desease_CreateDate]...';


GO
ALTER TABLE [dbo].[Desease]
    ADD CONSTRAINT [DF_Desease_CreateDate] DEFAULT (getdate()) FOR [CreateDate];


GO
PRINT N'Creating [dbo].[DF_Desease_CreatedBy]...';


GO
ALTER TABLE [dbo].[Desease]
    ADD CONSTRAINT [DF_Desease_CreatedBy] DEFAULT (suser_sname()) FOR [CreatedBy];


GO
PRINT N'Creating [dbo].[DF_Gencder_CreateDate]...';


GO
ALTER TABLE [dbo].[Gender]
    ADD CONSTRAINT [DF_Gencder_CreateDate] DEFAULT (getdate()) FOR [CreateDate];


GO
PRINT N'Creating [dbo].[DF_Gender_CreatedBy]...';


GO
ALTER TABLE [dbo].[Gender]
    ADD CONSTRAINT [DF_Gender_CreatedBy] DEFAULT (suser_sname()) FOR [CreatedBy];


GO
PRINT N'Creating [dbo].[DF_Party_CreateDate]...';


GO
ALTER TABLE [dbo].[Hospital]
    ADD CONSTRAINT [DF_Party_CreateDate] DEFAULT (getdate()) FOR [CreateDate];


GO
PRINT N'Creating [dbo].[DF_Party_CreatedBy]...';


GO
ALTER TABLE [dbo].[Hospital]
    ADD CONSTRAINT [DF_Party_CreatedBy] DEFAULT (suser_sname()) FOR [CreatedBy];


GO
PRINT N'Creating [dbo].[DF_PatientId_CreateDate]...';


GO
ALTER TABLE [dbo].[Patient]
    ADD CONSTRAINT [DF_PatientId_CreateDate] DEFAULT (getdate()) FOR [CreateDate];


GO
PRINT N'Creating [dbo].[DF_PatientId_CreatedBy]...';


GO
ALTER TABLE [dbo].[Patient]
    ADD CONSTRAINT [DF_PatientId_CreatedBy] DEFAULT (suser_sname()) FOR [CreatedBy];


GO
PRINT N'Creating [dbo].[DF_Problems_CreateDate]...';


GO
ALTER TABLE [dbo].[Problem]
    ADD CONSTRAINT [DF_Problems_CreateDate] DEFAULT (getdate()) FOR [CreateDate];


GO
PRINT N'Creating [dbo].[DF_Problems_CreatedBy]...';


GO
ALTER TABLE [dbo].[Problem]
    ADD CONSTRAINT [DF_Problems_CreatedBy] DEFAULT (suser_sname()) FOR [CreatedBy];


GO
PRINT N'Creating [dbo].[DF_PC_CreateDate]...';


GO
ALTER TABLE [dbo].[ProfessionalCategory]
    ADD CONSTRAINT [DF_PC_CreateDate] DEFAULT (getdate()) FOR [CreateDate];


GO
PRINT N'Creating [dbo].[DF_PC_CreatedBy]...';


GO
ALTER TABLE [dbo].[ProfessionalCategory]
    ADD CONSTRAINT [DF_PC_CreatedBy] DEFAULT (suser_sname()) FOR [CreatedBy];


GO
PRINT N'Creating [dbo].[DF_Substance_CreateDate]...';


GO
ALTER TABLE [dbo].[Substance]
    ADD CONSTRAINT [DF_Substance_CreateDate] DEFAULT (getdate()) FOR [CreateDate];


GO
PRINT N'Creating [dbo].[DF_Substance_CreatedBy]...';


GO
ALTER TABLE [dbo].[Substance]
    ADD CONSTRAINT [DF_Substance_CreatedBy] DEFAULT (suser_sname()) FOR [CreatedBy];


GO
PRINT N'Creating [dbo].[DF_Symptoms_CreateDate]...';


GO
ALTER TABLE [dbo].[Symptoms]
    ADD CONSTRAINT [DF_Symptoms_CreateDate] DEFAULT (getdate()) FOR [CreateDate];


GO
PRINT N'Creating [dbo].[DF_Symptoms_CreatedBy]...';


GO
ALTER TABLE [dbo].[Symptoms]
    ADD CONSTRAINT [DF_Symptoms_CreatedBy] DEFAULT (suser_sname()) FOR [CreatedBy];


GO
PRINT N'Creating [dbo].[FK_Country_Address]...';


GO
ALTER TABLE [dbo].[Address]
    ADD CONSTRAINT [FK_Country_Address] FOREIGN KEY ([CountryId]) REFERENCES [dbo].[Country] ([CountryId]);


GO
PRINT N'Creating [dbo].[FK_CareTeamMember_Address]...';


GO
ALTER TABLE [dbo].[CareTeamMember]
    ADD CONSTRAINT [FK_CareTeamMember_Address] FOREIGN KEY ([AddressId]) REFERENCES [dbo].[Address] ([AddressId]);


GO
PRINT N'Creating [dbo].[FK_CareTeamMember_Gender]...';


GO
ALTER TABLE [dbo].[CareTeamMember]
    ADD CONSTRAINT [FK_CareTeamMember_Gender] FOREIGN KEY ([GenderId]) REFERENCES [dbo].[Gender] ([GenderId]);


GO
PRINT N'Creating [dbo].[FK_Hostpital_Country]...';


GO
ALTER TABLE [dbo].[Hospital]
    ADD CONSTRAINT [FK_Hostpital_Country] FOREIGN KEY ([CountryId]) REFERENCES [dbo].[Country] ([CountryId]);


GO
PRINT N'Creating [dbo].[FK_Patient_Demographic]...';


GO
ALTER TABLE [dbo].[Patient]
    ADD CONSTRAINT [FK_Patient_Demographic] FOREIGN KEY ([DemographicId]) REFERENCES [dbo].[Demographic] ([DemographicId]);


GO
PRINT N'Creating [dbo].[FK_Patient_Gender]...';


GO
ALTER TABLE [dbo].[Patient]
    ADD CONSTRAINT [FK_Patient_Gender] FOREIGN KEY ([GenderId]) REFERENCES [dbo].[Gender] ([GenderId]);


GO
PRINT N'Creating [dbo].[FK_Patient_Problems]...';


GO
ALTER TABLE [dbo].[Symptoms]
    ADD CONSTRAINT [FK_Patient_Problems] FOREIGN KEY ([ProblemId]) REFERENCES [dbo].[Problem] ([ProblemId]);


GO
PRINT N'Creating [dbo].[TR_Address_UpdateDate_UpdatedBy]...';


GO
CREATE Trigger [dbo].[TR_Address_UpdateDate_UpdatedBy] on [dbo].[Address]
AFTER UPDATE
AS
BEGIN
	SET NOCOUNT ON;
	UPDATE [Address] SET [UpdateDate] = GETDATE(), [UpdatedBy] = SUSER_SNAME()
	FROM [Address] AS a
	INNER JOIN Inserted AS i 
	ON a.AddressId = i.AddressId
END
GO
PRINT N'Creating [dbo].[TR_CareTeamMember_UpdateDate_UpdatedBy]...';


GO
CREATE Trigger [dbo].[TR_CareTeamMember_UpdateDate_UpdatedBy] on [dbo].[CareTeamMember]
AFTER UPDATE
AS
BEGIN
	SET NOCOUNT ON;
	UPDATE [CareTeamMember] SET [UpdateDate] = GETDATE(), [UpdatedBy] = SUSER_SNAME()
	FROM [CareTeamMember] AS a
	INNER JOIN Inserted AS i 
	ON a.[CareTeamMemberId] = i.[CareTeamMemberId]
END
GO
PRINT N'Creating [dbo].[TR_Country_UpdateDate_UpdatedBy]...';


GO
CREATE Trigger [dbo].[TR_Country_UpdateDate_UpdatedBy] on [dbo].[Country]
AFTER UPDATE
AS
BEGIN
	SET NOCOUNT ON;
	UPDATE [dbo].[Country] SET [UpdateDate] = GETDATE(), [UpdatedBy] = SUSER_SNAME()
	FROM [Country] AS c
	INNER JOIN Inserted AS i 
	ON c.[CountryId] = i.[CountryId]
END
GO
PRINT N'Creating [dbo].[TR_Demographic_UpdateDate_UpdatedBy]...';


GO
CREATE Trigger [dbo].[TR_Demographic_UpdateDate_UpdatedBy] on [dbo].[Demographic]
AFTER UPDATE
AS
BEGIN
	SET NOCOUNT ON;
	UPDATE [Demographic] SET [UpdateDate] = GETDATE(), [UpdatedBy] = SUSER_SNAME()
	FROM [Demographic] AS a
	INNER JOIN Inserted AS i 
	ON a.[DemographicId] = i.[DemographicId]
END
GO
PRINT N'Creating [dbo].[TR_Desease_UpdateDate_UpdatedBy]...';


GO
CREATE Trigger [dbo].[TR_Desease_UpdateDate_UpdatedBy] on [dbo].[Desease]
AFTER UPDATE
AS
BEGIN
	SET NOCOUNT ON;
	UPDATE [Desease] SET [UpdateDate] = GETDATE(), [UpdatedBy] = SUSER_SNAME()
	FROM [Desease] AS a
	INNER JOIN Inserted AS i 
	ON a.[DeseaseId] = i.[DeseaseId]
END
GO
PRINT N'Creating [dbo].[TR_Gender_UpdateDate_UpdatedBy]...';


GO
CREATE Trigger [dbo].[TR_Gender_UpdateDate_UpdatedBy] on [dbo].[Gender]
AFTER UPDATE
AS
BEGIN
	SET NOCOUNT ON;
	UPDATE [Gender] SET [UpdateDate] = GETDATE(), [UpdatedBy] = SUSER_SNAME()
	FROM [Gender] AS a
	INNER JOIN Inserted AS i 
	ON a.[GenderId] = i.[GenderId]
END
GO
PRINT N'Creating [dbo].[TR_Hospital_UpdateDate_UpdatedBy]...';


GO
CREATE Trigger [dbo].[TR_Hospital_UpdateDate_UpdatedBy] on [dbo].[Hospital]
AFTER UPDATE
AS
BEGIN
	SET NOCOUNT ON;
	UPDATE [dbo].[Hospital] SET [UpdateDate] = GETDATE(), [UpdatedBy] = SUSER_SNAME()
	FROM [Hospital] AS c
	INNER JOIN Inserted AS i 
	ON c.[HospitalId] = i.[HospitalId]
END
GO
PRINT N'Creating [dbo].[TR_Problems_UpdateDate_UpdatedBy]...';


GO
CREATE Trigger [dbo].[TR_Problems_UpdateDate_UpdatedBy] on [dbo].[Problem]
AFTER UPDATE
AS
BEGIN
	SET NOCOUNT ON;
	UPDATE [Problem] SET [UpdateDate] = GETDATE(), [UpdatedBy] = SUSER_SNAME()
	FROM [Problem] AS a
	INNER JOIN Inserted AS i 
	ON a.[ProblemId] = i.[ProblemId]
END
GO
PRINT N'Creating [dbo].[TR_PC_UpdateDate_UpdatedBy]...';


GO
CREATE Trigger [dbo].[TR_PC_UpdateDate_UpdatedBy] on [dbo].[ProfessionalCategory]
AFTER UPDATE
AS
BEGIN
	SET NOCOUNT ON;
	UPDATE [ProfessionalCategory] SET [UpdateDate] = GETDATE(), [UpdatedBy] = SUSER_SNAME()
	FROM [ProfessionalCategory] AS a
	INNER JOIN Inserted AS i 
	ON a.[ProfessionalCategoryId] = i.[ProfessionalCategoryId]
END
GO
PRINT N'Creating [dbo].[TR_Substance_UpdateDate_UpdatedBy]...';


GO
CREATE Trigger [dbo].[TR_Substance_UpdateDate_UpdatedBy] on [dbo].[Substance]
AFTER UPDATE
AS
BEGIN
	SET NOCOUNT ON;
	UPDATE [Substance] SET [UpdateDate] = GETDATE(), [UpdatedBy] = SUSER_SNAME()
	FROM [Substance] AS a
	INNER JOIN Inserted AS i 
	ON a.[SubstanceId] = i.[SubstanceId]
END
GO
PRINT N'Creating [dbo].[TR_Symptoms_UpdateDate_UpdatedBy]...';


GO
CREATE Trigger [dbo].[TR_Symptoms_UpdateDate_UpdatedBy] on [dbo].[Symptoms]
AFTER UPDATE
AS
BEGIN
	SET NOCOUNT ON;
	UPDATE [Symptoms] SET [UpdateDate] = GETDATE(), [UpdatedBy] = SUSER_SNAME()
	FROM [Symptoms] AS a
	INNER JOIN Inserted AS i 
	ON a.[SymptomId] = i.[SymptomId]
END
GO
PRINT N'Creating [dbo].[Usp_AddNewPatient]...';


GO

CREATE PROCEDURE [dbo].[Usp_AddNewPatient]
	@LastName varchar(70),
	@FirstName varchar(70),
	@MiddleName varchar(70),
	@PatientStatus bit,
	@Company varchar(70),
	@PreferredMethodofContact Varchar(70),
	@MaritalStatus Varchar(70),
	@HomePhone varchar(70),
	@CellPhone varchar(70),
	@WorkPhone varchar(70),
	@Email varchar(70),
	@GorvernmentId varchar(70),
	@dateofBirth datetime,
	@Sex varchar(20),
	@Demographic BiGINT,
	@EmergencyContact varchar(70),
	@EmergencyPhone varchar(70),	
	@Address1 varchar(70),
	@Address2 varchar(70),
	@City varchar(70),
	@Province varchar(70),
	@PostalCode varchar(70),
	@CountryId BiGINT
AS
BEGIN
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED
	SET NOCOUNT ON

	BEGIN TRY
		BEGIN TRANSACTION
	DECLARE @DemoId bigint, @gendid bigint
	SELECT @DemoId =DemographicId
	FROM [dbo].[Demographic]
	SELECT @gendid =GenderId
	FROM [dbo].Gender	
	INSERT INTO dbo.Patient([FirstName],[LastName],[MiddleName],[PatientStatus],[Company],[PerferredMethodofContact],[MaritalStatus],
							[HomePhone],[CellPhone],[WorkPhone],[EmailAddress],[GorvernmentId],[DateofBirth],[GenderId],[DemographicId],
							[EmergencyContactName],[EmergencyContactPhone],[Address1],[Address2],[City],[Province],[PostalCode],[CountryId])
	VALUES(@FirstName,@LastName,@MiddleName,@PatientStatus,@Company,@PreferredMethodofContact,@MaritalStatus,@HomePhone,@CellPhone,@WorkPhone,
	        @Email,@GorvernmentId,@dateofBirth,@gendid,@DemoId,@EmergencyContact,@EmergencyPhone,@Address1,@Address2,@City,@Province,@PostalCode,
			@CountryId)
COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		DECLARE 
			@ErrorMessage NVARCHAR(4000),
			@ErrorSeverity INT,
			@ErrorState INT;
		SELECT 
			@ErrorMessage = ERROR_MESSAGE(),
			@ErrorSeverity = ERROR_SEVERITY(),
			@ErrorState = ERROR_STATE();
		RAISERROR (
			@ErrorMessage,
			@ErrorSeverity,
			@ErrorState    
			);
		ROLLBACK TRANSACTION
	END CATCH
END
GO
PRINT N'Creating [dbo].[Usp_AddnewTeamMember]...';


GO

-- =============================================
-- Author:		<Abou,Diaby>
-- Create date: <Create Date,,>
-- Description:	<Add new team member,,>
-- =============================================
CREATE PROCEDURE [dbo].[Usp_AddnewTeamMember]
	-- Add the parameters for the stored procedure here
	@LastName varchar(70),
	@FirstName varchar(70),
	@MiddleName varchar(70),
	@Gender varchar(70),
	@Profession varchar(70),
	@Phone varchar(70),
	@Cell varchar(70),
	@Email varchar(70),
	@dateofBirth datetime,
	@Company varchar(70),
	@Demographic varchar(70),
	@EmergencyContact varchar(70),
	@EmergencyPhone varchar(70),
	@HireDate DateTime,
	@TerminationDate Datetime,
	@Specialization varchar(70),
	@Address1 varchar(70),
	@Address2 varchar(70),
	@City varchar(70),
	@Province varchar(70),
	@PostalCode varchar(70),
	@CountryId bigint,
	@PhotoFilePath varchar(100)

AS
BEGIN
	--SET TRANSACTION ISOLATION LEVEL READ COMMITTED
	SET NOCOUNT ON

	BEGIN TRY
		BEGIN TRANSACTION
	--Get IDs	
			DECLARE @AddressId bigint, @genderid bigint		
			SELECT @Genderid =[GenderId] FROM [dbo].[Gender]  where Name = @Gender 			
			
-- Insert into Table Database
			INSERT INTO [dbo].[Address]
           ([Address1]
           ,[Address2]
           ,[City]
           ,[Province]
           ,[PostalCode]
           ,[CountryId]
           )
     VALUES
           (@Address1
           ,@Address2
           ,@City
           ,@Province
           ,@PostalCode
           ,@CountryId
           )
			SET @AddressId = SCOPE_IDENTITY();

    -- Insert statements for procedure here
	

INSERT INTO [dbo].[CareTeamMember]
           ([LastName]
           ,[FirstName]
           ,[MiddleName]
           ,[AddressId]
           ,[GenderId]
           ,[ProfessionalCategoryId]
           ,[PhoneNumber]
           ,[CellNumber]
           ,[EmailAddress]
           ,[DateofBirth]
           ,[Company]
           ,[Demographic]
           ,[EmergencyContactName]
           ,[EmergencyContactPhoneNumber]
           ,[HireDate]
           ,[TerminationDate]
           ,[Specialization],
		   [PhotoFilePath]
          )
     VALUES
           (@LastName
           ,@FirstName
           ,@MiddleName
           ,@AddressId
           ,@GenderId
           ,@Profession
           ,@Phone
           ,@Cell
           ,@Email
           ,@DateofBirth
           ,@Company
           ,@Demographic
           ,@EmergencyContact
           ,@EmergencyContact
           ,@HireDate
           ,@TerminationDate
           ,@Specialization
		   ,@PhotoFilePath
           )
		   

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		DECLARE 
			@ErrorMessage NVARCHAR(4000),
			@ErrorSeverity INT,
			@ErrorState INT;
		SELECT 
			@ErrorMessage = ERROR_MESSAGE(),
			@ErrorSeverity = ERROR_SEVERITY(),
			@ErrorState = ERROR_STATE();
		RAISERROR (
			@ErrorMessage,
			@ErrorSeverity,
			@ErrorState    
			);
		ROLLBACK TRANSACTION
	END CATCH
END
GO
PRINT N'Creating [dbo].[Usp_GetMemberbyKeyword]...';


GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[Usp_GetMemberbyKeyword]
	@Keywordkey varchar(100),
	@Keywordvalue varchar(100)

AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	IF @Keywordkey ='CareTeamMemberId'
	BEGIN
		SELECT g.[GenderId],p.[ProfessionalCategoryId], a.[addressId], [CareTeamMemberId], [LastName],[FirstName],[MiddleName], a.[Address1], a.[Address2],a.[City],a.[Province],a.[PostalCode], [PhoneNumber],p.[Name] as profession,g.[Name] as Gender,[CellNumber],[EmailAddress],[DateofBirth],[PlaceofBirth],[Company],[Demographic] ,[EmergencyContactName]
				,[EmergencyContactPhoneNumber]  ,[HireDate] ,[TerminationDate],[Specialization], [PhotoFilePath],a.CountryId, c.[CreateDate]
		FROM [CareTeamMember]c
		LEFT JOIN [dbo].[Address] a on c.[AddressId]= a.[AddressId]
		LEFT JOIN [dbo].[Gender] g ON c.[GenderId] = g.[GenderId]
		LEFT JOIN [dbo].[ProfessionalCategory] p ON c.[ProfessionalCategoryId] = p.[ProfessionalCategoryId]
		WHERE  c.[CareTeamMemberId] =@Keywordvalue
	END
	ELSE IF  @Keywordkey ='LastName'
	BEGIN
		SELECT g.[GenderId],p.[ProfessionalCategoryId], a.[addressId], [CareTeamMemberId], [LastName],[FirstName],[MiddleName],a.[Address1], a.[Address2],a.[City],a.[Province],a.[PostalCode],[PhoneNumber],p.[Name] as profession,g.[Name] as Gender,[CellNumber],[EmailAddress],[DateofBirth],[PlaceofBirth],[Company],[Demographic] ,[EmergencyContactName]
				,[EmergencyContactPhoneNumber]  ,[HireDate] ,[TerminationDate],[Specialization], a.CountryId,[PhotoFilePath],c.[CreateDate]
		FROM [CareTeamMember]c
		LEFT JOIN [dbo].[Address] a on c.[AddressId]= a.[AddressId]
		LEFT JOIN [dbo].[Gender] g ON c.[GenderId] = g.[GenderId]
		LEFT JOIN [dbo].[ProfessionalCategory] p ON c.[ProfessionalCategoryId] = p.[ProfessionalCategoryId]
		WHERE  c.[LastName] =@Keywordvalue
	END
	ELSE IF  @Keywordkey ='Phonenumber'
	BEGIN
		SELECT g.[GenderId],p.[ProfessionalCategoryId], a.[addressId], [CareTeamMemberId], [LastName],[FirstName],[MiddleName],a.[Address1], a.[Address2],a.[City],a.[Province],a.[PostalCode],[PhoneNumber],p.[Name] as profession,g.[Name] as Gender,[CellNumber],[EmailAddress],[DateofBirth],[PlaceofBirth],[Company],[Demographic] ,[EmergencyContactName]
				,[EmergencyContactPhoneNumber]  ,[HireDate] ,[TerminationDate],[Specialization], a.CountryId,[PhotoFilePath],c.[CreateDate]
		FROM [CareTeamMember]c
		LEFT JOIN [dbo].[Address] a on c.[AddressId]= a.[AddressId]
		LEFT JOIN [dbo].[Gender] g ON c.[GenderId] = g.[GenderId]
		LEFT JOIN [dbo].[ProfessionalCategory] p ON c.[ProfessionalCategoryId] = p.[ProfessionalCategoryId]
		WHERE  c.[PhoneNumber] = @Keywordvalue OR  c.[CellNumber] = @Keywordvalue
	END
	ELSE 
	BEGIN
		SELECT g.[GenderId],p.[ProfessionalCategoryId], a.[addressId], [CareTeamMemberId], [LastName],[FirstName],[MiddleName],a.[Address1], a.[Address2],a.[City],a.[Province],a.[PostalCode],[PhoneNumber],p.[Name] as profession,g.[Name] as Gender,[CellNumber],[EmailAddress],[DateofBirth],[PlaceofBirth],[Company],[Demographic] ,[EmergencyContactName]
				,[EmergencyContactPhoneNumber]  ,[HireDate] ,[TerminationDate],[Specialization], a.CountryId,[PhotoFilePath],c.[CreateDate]
		FROM [CareTeamMember]c
		LEFT JOIN [dbo].[Address] a on c.[AddressId]= a.[AddressId]
		LEFT JOIN [dbo].[Gender] g ON c.[GenderId] = g.[GenderId]
		LEFT JOIN [dbo].[ProfessionalCategory] p ON c.[ProfessionalCategoryId] = p.[ProfessionalCategoryId]
		
	END
END
GO
PRINT N'Creating [dbo].[usp_GetPatientbyKeyWord]...';


GO
CREATE PROCEDURE [dbo].[usp_GetPatientbyKeyWord]
	@Keywordkey varchar(100),
	@Keywordvalue varchar(100)
AS
BEGIN	
	SET NOCOUNT ON;

    IF @Keywordkey ='PatientId'
		BEGIN
			SELECT [PatientId],[LastName] ,[FirstName],[MiddleName],[PatientStatus],g.Name As Sex,[HomePhone] ,[CellPhone],[WorkPhone]
				  ,[EmailAddress],[DateofBirth],[Company],[EmergencyContactName] ,[EmergencyContactPhone]  ,[GorvernmentId],[Address1]
				  ,[Address2],[City],[Province],[PostalCode],[CountryId],[PerferredMethodofContact],[MaritalStatus],D.Name AS Demographic      
			FROM [GPS].[dbo].[Patient] p
			INNER JOIN Demographic d ON P.DemographicId =d.DemographicId
			INNER JOIN Gender g on p.GenderId = g.GenderId
			WHERE [PatientId]=@Keywordvalue
		END
	ELSE IF  @Keywordkey ='LastName'
	BEGIN
			SELECT [PatientId],[LastName] ,[FirstName],[MiddleName],[PatientStatus],g.Name As Sex,[HomePhone] ,[CellPhone],[WorkPhone]
				  ,[EmailAddress],[DateofBirth],[Company],[EmergencyContactName] ,[EmergencyContactPhone]  ,[GorvernmentId],[Address1]
				  ,[Address2],[City],[Province],[PostalCode],[CountryId],[PerferredMethodofContact],[MaritalStatus],D.Name AS Demographic      
			FROM [GPS].[dbo].[Patient] p
			INNER JOIN Demographic d ON P.DemographicId =d.DemographicId
			INNER JOIN Gender g on p.GenderId = g.GenderId
			WHERE [PatientId]=@Keywordvalue
	END
END
GO
PRINT N'Creating [dbo].[usp_UpdatePatientInfo]...';


GO


-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[usp_UpdatePatientInfo]
	@patientId  bigint,
	@PatientStatus bit,
	@Company varchar(70),
	@PreferredMethodofContact Varchar(70),
	@MaritalStatus Varchar(70),
	@HomePhone varchar(70),
	@CellPhone varchar(70),
	@WorkPhone varchar(70),
	@Email varchar(70),	
	@EmergencyContact varchar(70),
	@EmergencyPhone varchar(70),	
	@Address1 varchar(70),
	@Address2 varchar(70),
	@City varchar(70),
	@Province varchar(70),
	@PostalCode varchar(70)
	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	Update Patient
	set PatientStatus =@PatientStatus,
	    Company =@Company,
		PerferredMethodofContact =@PreferredMethodofContact,
		MaritalStatus =@MaritalStatus,
		HomePhone=@HomePhone,
		CellPhone= @CellPhone,
		WorkPhone=@WorkPhone,
		EmailAddress=@Email,
		EmergencyContactName=@EmergencyContact,
		EmergencyContactPhone=@EmergencyPhone,
		Address1=@Address1,
		Address2 =@Address2,
		City =@City,
		Province=@Province,
		PostalCode=@PostalCode
	WHERE PatientId =@patientId

	

END
GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
PRINT N'Update complete.';


GO
